name: pipeline

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_VERSION: v0.3.0
      SCCACHE_CACHE_SIZE: 2G
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment it back out
    steps:
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt, clippy

      - name: Install sccache
        run: |
          SCCACHE_FILE=sccache-${{ env.SCCACHE_VERSION }}-x86_64-unknown-linux-musl
          curl -L "https://github.com/mozilla/sccache/releases/download/${{ env.SCCACHE_VERSION }}/$SCCACHE_FILE.tar.gz" | tar xz
          mkdir -p ~/.local/bin
          mv -f "$SCCACHE_FILE/sccache" ~/.local/bin/sccache
          chmod +x ~/.local/bin/sccache
          echo ~/.local/bin >> $GITHUB_PATH

      - name: Check out
        uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Set up sccache cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-sccache-

      - name: Start sccache server
        run: sccache --start-server

      - name: Lint
        run: make lint

      - name: Install check deps
        run: cargo install --locked cargo-deny cargo-outdated cargo-udeps cargo-audit cargo-pants

      - name: Check
        run: make check

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: Dockerfile
          ignore: DL3006

      - name: Print sccache stats
        if: always()
        run: sccache --show-stats

      - name: Stop sccache server
        if: always()
        run: sccache --stop-server || true
  # build:
  #   runs-on: ubuntu-latest
  #   needs: lint
  #   steps:
  #     - name: Check out
  #       uses: actions/checkout@v3
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2.0.0
  #     - name: Cache Docker layers
  #       uses: actions/cache@v3
  #       with:
  #         path: /tmp/.buildx-cache
  #         key: ${{ runner.os }}-buildx-${{ github.sha }}
  #         restore-keys: |
  #           ${{ runner.os }}-buildx-
  #     - name: Set up tags
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ectobit/vanity
  #         labels: |
  #           org.opencontainers.image.licenses=BSD-2-Clause-Patent
  #           org.opencontainers.image.vendor=ectobit.com
  #         tags: |
  #           type=schedule
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #           type=semver,pattern={{major}}
  #           type=edge
  #           type=sha
  #     - name: Login to container registry
  #       uses: docker/login-action@v2.0.0
  #       with:
  #         username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
  #         password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
  #     - name: Build and push image to container registry
  #       uses: docker/build-push-action@v3.0.0
  #       with:
  #         platforms: linux/amd64,linux/arm64
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         cache-from: type=local,src=/tmp/.buildx-cache
  #         cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
  #     - name: Move cache
  #       run: |
  #         rm -rf /tmp/.buildx-cache
  #         mv /tmp/.buildx-cache-new /tmp/.buildx-cache
