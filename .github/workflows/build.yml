name: build

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v2.3.4
      - name: Install rustfmt and clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v1
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1.0.3
        with:
          command: fmt
          args: --all -- --check
      - name: Run cargo clippy
        uses: actions-rs/cargo@v1.0.3
        with:
          command: clippy
          args: -- -D warnings
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features
      - name: Install cargo audit
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-audit
      - name: Run cargo audit
        uses: actions-rs/cargo@v1
        with:
          command: audit
      # - name: Install cargo pants               ENABLE ME
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: install
      #     args: cargo-pants
      # - name: Run cargo pants
      #   uses: actions-rs/cargo@v1
      #   with:
      #     command: pants
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: Dockerfile
          ignore: DL3006
  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out
        uses: actions/checkout@v2.3.4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
      - name: Login to container registry
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
      - name: Prepare tags
        id: prep
        run: |
          IMAGE=ectobit/vanity
          VERSION=noop
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/tags/} | sed -r 's#v##g')
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${IMAGE}:${MINOR},${IMAGE}:${MAJOR},${IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Build and push image to container registry
        uses: docker/build-push-action@v2.7.0
        with:
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
            org.opencontainers.image.vendor=ectobit.com
