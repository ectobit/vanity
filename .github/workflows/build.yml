name: build

on: [push, pull_request]

jobs:
  lint:
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [nightly]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Install rustfmt and clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy
      - name: Set up cache
        uses: actions/cache@v2.1.7
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1.0.3
        with:
          command: fmt
          args: --all -- --check
      - name: Run cargo clippy
        uses: actions-rs/cargo@v1.0.3
        with:
          command: clippy
          args: -- -D warnings
      - name: Install cargo udeps
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-udeps --locked
      - name: Run cargo udeps
        uses: actions-rs/cargo@v1
        with:
          command: udeps
      - name: Install cargo audit
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-audit
      - name: Run cargo audit
        uses: actions-rs/cargo@v1
        with:
          command: audit
        continue-on-error: true
      - name: Install cargo pants
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-pants
      - name: Run cargo pants
        uses: actions-rs/cargo@v1
        with:
          command: pants
        continue-on-error: true
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: Dockerfile
          ignore: DL3006
  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
      - name: Cache Docker layers
        uses: actions/cache@v2.1.7
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up tags
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ectobit/vanity
          labels: |
            org.opencontainers.image.licenses=BSD-2-Clause-Patent
            org.opencontainers.image.vendor=ectobit.com
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=edge
            type=sha
      - name: Login to container registry
        uses: docker/login-action@v1.14.0
        with:
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
      - name: Build and push image to container registry
        uses: docker/build-push-action@v2.9.0
        with:
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
